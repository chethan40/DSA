//Intersection point of 2 ll
//input
//   4->1↘
//        8->4->5
//5->6->1↗
//output: 8
//both ll inrtersecting at 8

//brute force
//hash map
//create a map which stores Node and count
//should store entire node not node->data
//because node is unique and node->data is not unique like 1 in input

ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        map<ListNode*,int>mpp;
        ListNode* temp=headA;
        while(temp!=nullptr)
        {
            mpp[temp]=1;
            temp=temp->next;
        }
        temp=headB;
        while(temp!=nullptr)
        {
            if(mpp.find(temp)!=mpp.end()) return temp;
            temp=temp->next;
        }
        return nullptr;
    }
//TC->O(N1*map comp)+O(N2*map comp)
//SC->O(N1)any one ll

//Optimal
//2 pointers
//place temp1 and temp2 at headA and headB
//move both one step at a time

//if any pointer reach null change their head to other ll head
//if temp1=nullptr then temp1=headB
//if temp2=nullptr then temp2=headA

ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(headA==nullptr || headB==nullptr) return nullptr;

        ListNode* temp1=headA;
        ListNode* temp2=headB;

        while(temp1!=temp2) //if intersection point is the first node itself headA=headB
        {
            temp1=temp1->next;
            temp2=temp2->next;

            if(temp1==temp2)return temp1; //intersection point

            if(temp1==nullptr) temp1=headB;
            if(temp2==nullptr) temp2=headA;
        }
        return temp1;
    }

//TC->O(N1+N2)
//SC->O(1)
